{
  "Version": "v1",
  "MappingFields": [
    {
      "Name": "AutoReplyState",
      "Description": "[Required] if using the delete script for enabling AutoReplyState",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Delete"
          ],
          "MappingMode": "Fixed",
          "Value": "\"Enabled\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
    {
      "Name": "Guid",
      "Description": "[Required] Account Reference is written back to account data",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "None",
          "Value": "\"\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "InternalMessage",
      "Description": "[Required] if using the delete script for enabling AutoReplyState",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Delete"
          ],
          "MappingMode": "Complex",
          "Value": "\"function getValue() {\\n    let manager = Person.PrimaryManager.DisplayName;\\n    let managerName = 'PutHereYourFallBackManagerName';\\n\\n    if (typeof manager !== 'undefined' && manager) {\\n         managerName = manager.split(' (')[0];\\n    }\\n\\n    let output = 'Dear colleague, thank you for your message. ';\\n    output = output + 'I am no longer employed at YourCompany. ';\\n    output = output + 'Your mail will be forwarded to ' + managerName;\\n    return output;\\n}\\n\\ngetValue();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
    {
      "Name": "ExternalMessage",
      "Description": "[Required] if using the delete script for enabling AutoReplyState",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Delete"
          ],
          "MappingMode": "Complex",
          "Value": "\"function getValue() {\\n    let manager = Person.PrimaryManager.DisplayName;\\n    let managerMailToCheck = Person.PrimaryManager.Email;\\n    let managerName = 'PutHereYourFallBackManagerName';\\n    let managerMail = 'PutHereYourFallBackManagerMail@mail.com';\\n\\n    if (typeof manager !== 'undefined' && manager) {\\n         managerName = manager.split(' (')[0];\\n    }\\n    if (typeof managerMailToCheck !== 'undefined' && managerMailToCheck) {\\n        managerMail = managerMailToCheck;\\n    }\\n\\n    let output = 'Dear Sir, Madam, Thank you for your email. ';\\n    output = output + 'I am no longer employed at YourCompany. ';\\n    output = output + 'Your mail is automatically forwarded to my colleague ' + managerName;\\n    output = output + 'with mail address ' + managerMail;\\n\\n    return output;\\n}\\n\\ngetValue();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
    {
      "Name": "userPrincipalName",
      "Description": "[Required] for correlation",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "None",
          "Value": "\"\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
    {
      "Name": "HiddenFromAddressListsEnabled",
      "Description": "[Required] if using the enable and disable script for HiddenFromAddressListsEnabled.\nRemoving the field from the create action will result in correlation only within the create script.\n",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Disable"
          ],
          "MappingMode": "Fixed",
          "Value": "\"true\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        },
        {
          "MapForActions": [
            "Enable"
          ],
          "MappingMode": "Fixed",
          "Value": "\"false\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
     {
      "Name": "EmailAddresses",
      "Description": "EmailAddresses Please use carefully, this will update the primary mailadres, remove if not needed. ",
      "Type": "Array",
      "MappingActions": [
        {
          "MapForActions": [
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"// Please enter the mapping logic to generate the mailNickname.\\r\\n// This must result in a unique alias to be used for email addresses for this user.\\r\\n// This will most likely be equal to the part before the '@' sign of the UserPrincipleName.\\r\\n// Please make sure that the result is not formatted like an email address.\\r\\nfunction generateMailNickname() {\\r\\n    let firstName = Person.Name.NickName;\\r\\n    let middleName = Person.Name.FamilyNamePrefix;\\r\\n    if (typeof middleName !== 'undefined' && middleName) {\\r\\n        if(middleName.split(' ').length == 1){\\r\\n            middleName = middleName;\\r\\n        } else {\\r\\n            middleName = middleName.match(/\\\\b(\\\\w)/g).join('')\\r\\n        }\\r\\n    }\\r\\n    let lastName = Person.Name.FamilyName;\\r\\n    let middleNamePartner = Person.Name.FamilyNamePartnerPrefix;\\r\\n    if (typeof middleNamePartner !== 'undefined' && middleNamePartner) {\\r\\n        if(middleNamePartner.split(' ').length == 1){\\r\\n            middleNamePartner = middleNamePartner;\\r\\n        } else {\\r\\n            middleNamePartner = middleNamePartner.match(/\\\\b(\\\\w)/g).join('')\\r\\n        }\\r\\n    }\\r\\n    let lastNamePartner = Person.Name.FamilyNamePartner;\\r\\n    let convention = Person.Name.Convention;\\r\\n\\r\\n    const suffix = Iteration <= (firstName.length - 1) ? '' : (Iteration - (firstName.length - 2));\\r\\n\\r\\n    //  Eerste keuze\\t        B\\tJanine.vd.boele\\r\\n    // \\t                        BP\\tJanine.vd.boele\\r\\n    // \\t                        P\\tJanine.de.vries\\r\\n    // \\t                        PB  Janine.de.vries\\r\\n    //  Indien in gebruik\\t    B\\tJ.vd.boele\\r\\n    // \\t                        BP\\tJ.vd.boele\\r\\n    // \\t                        P\\tJ.de.vries\\r\\n    // \\t                        PB\\tJ.de.vries\\r\\n    //  Indien ook in gebruik\\tB\\tJa.vd.boele\\r\\n    // \\t                        BP\\tJa.vd.boele\\r\\n    // \\t                        P\\tJa.de.vries\\r\\n    // \\t                        PB\\tJa.de.vries\\r\\n\\r\\n    let mailNickname = '';\\r\\n    if (Iteration === 0) {\\r\\n        mailNickname = firstName + '.';\\r\\n    }else if(Iteration === 1) {\\r\\n        mailNickname = firstName.charAt(0)+ '.';\\r\\n    } else {\\r\\n        mailNickname = firstName.substring(0, (Iteration)) + '.';\\r\\n    }\\r\\n\\r\\n    switch (convention) {\\r\\n        case \\\"B\\\":\\r\\n        case \\\"BP\\\":\\r\\n            if (typeof middleName !== 'undefined' && middleName) { mailNickname = mailNickname + middleName + '.'}\\r\\n            mailNickname = mailNickname + lastName;\\r\\n            break;\\r\\n        case \\\"P\\\":\\r\\n        case \\\"PB\\\":\\r\\n            if (typeof middleNamePartner !== 'undefined' && middleNamePartner) { mailNickname = mailNickname + middleNamePartner + '.'}\\r\\n            mailNickname = mailNickname + lastNamePartner;\\r\\n            break;\\r\\n        default:\\r\\n            if (typeof middleName !== 'undefined' && middleName) { mailNickname = mailNickname + middleName + '.'}\\r\\n            mailNickname = mailNickname + lastName;\\r\\n            break;\\r\\n    }\\r\\n\\r\\n    //Convert to lower case\\r\\n    mailNickname = mailNickname.toLowerCase();\\r\\n\\r\\n    //Remove diacritical chars\\r\\n    mailNickname = deleteDiacriticalMarks(mailNickname);\\r\\n\\r\\n    //Remove blank chars and \\\"'\\\"\\r\\n    mailNickname = mailNickname.replace(/[^0-9a-zA-Z.-]/g, '');\\r\\n\\r\\n    // use the iterator if needed\\r\\n    mailNickname = mailNickname + suffix;   \\r\\n\\r\\n    // return mailNickname;\\r\\n    return mailNickname;\\r\\n}\\r\\n\\r\\nfunction getValue() {\\r\\n    const nickName = generateMailNickname();\\r\\n    let domain = \\\"\\\"\\r\\n\\r\\n    if (Person.PrimaryContract.Custom.allOECodes.indexOf('\\\"3-DVD\\\"') !== -1) {\\r\\n         domain = 'devalckdealmakers.nl';\\r\\n    } else{\\r\\n         domain = 'bentacera.nl';\\r\\n    }\\r\\n\\r\\n\\treturn [\\r\\n        \\\"SMTP:\\\" + nickName + '@' + domain,\\r\\n        \\\"smtp:\\\" + nickName.replace(/\\\\./g, '') + '@' + domain\\r\\n    ]\\r\\n\\t\\r\\n}\\r\\n\\r\\ngetValue();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "CustomAttribute1",
      "Description": "[Required] if using the update script for updating custom attributes.\nAt least one custom attribute is required when using the update script to update custom attributes.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.PrimaryContract.Title.Name\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    }
  ],
  "UniqueFieldNames": []
}
